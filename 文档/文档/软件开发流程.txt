软件开发的正常工作流程：

1、可行性分析------判断一个项目可不可不做，从两方面（甲方--乙方）：市场、资金、技术能力
最终的结果是：《可行性分析报告》--能不能做，为什么不能做？

2、需求调研-------可行性分析只是判断能不能做，但是具体做什么，怎么做，我们这个时候是不知道，
需要我们技术人员到客户现场去了解哪些是需要做的，哪些是需要我们考虑的。
最终的结果是：《需求调研报告》---功能性需求是客户所提，非功能性需求不是客户所提，但是我们系统开发
或生产阶段必不可少的。

3、需求分析-------需求调研的结果只是一个初略的，需要详细化，那么详细化之后的结果就是《需求分析文档》，
但是《需求分析文档》一般是由大量的文字，与少量的图片构成。这在于客户来说，阅读性极差，也不好直观的描述。
这个时候，我们需要将《需求分析文档》转换为（AxureRp）原型图。原型图的作用：千文不如一图（直观）、便于
帮助理解需求文档，第二个作用就是协助需求设计阶段。《需求分析文档》添加了对应的原型图之后就被称之为《需求规格说明书》

4、设计阶段-------需求设计的作用：确定应用程序的架构，以及实现该应用程序的技术选型。主要分为2个阶段：概要设计阶段
、详细设计阶段。

概要设计阶段：根据需求文档以及原型图，抽取主要的领域对象（JavaBean）,分析功能需求的复杂度，确定业务逻辑的架构模式：
事务脚步（面向过程），领域模型（面向对象）。如果功能需求不复杂，则建议选择事务脚步，将领域对象的行为抽象成业务层的接口。
如果功能需求较为复杂，则建议选择领域模型，将领域模型的行为抽象成领域对象的行为。根据业务逻辑层的接口，抽取持久层以及表现层的接口。

对于一个成功的项目来说：一个很强的架构愿景是非常重要的，架构：一个项目中最为基本的组织结构，一般包括：组成该项目的
组件，以及组件之间的项目关系，环境，以及设计和演讲的指导原则。项目最初定义下来的东西，一般不会发生改变的东西，就被
称之为"架构"。

所谓的三层，四层架构就是最初定义的东西。概要设计的目的：确定领域对象以及层次结构

那在概设阶段如何去设计自己的层次结构，这时候就需要使用到UML图（统一建模语言）、其作用等同于建筑的行业的各种图纸。

UML设计图纸可以分为两种：结构图（静态图）、描述系统的组织架构，系统的组成组件，业务逻辑中领域相关的元素。说直观一点就是系统中死的文件，或者物体
例如：包图，类图，组件图，部署图，对象图，组合结构图。

行为图（动态图）、在系统中事件都是动态产生的，对象的创建与销毁，对象之间的调用都是按照一定的次序发出的消息。都是一些
动态的操作。行为图就是对这些动态操作的一个描述。
例如：用例图、活动图，状态机图，交互图，序列图，通信图，交互概述图，时间图

使用EA工具设计系统的应用架构
使用PD工具设计数据库的表结构


详细设计阶段：将概要设计的后的结果详细化，详细到每个方法中逻辑如何写，详细到方法中算法应该如何算。

5、编码阶段-------就是将概要设计过程中得到的接口进行具体实现，并且进行测试。完了之后再书写表现层以及UI界面。
先实现持久层接口-----再实现业务层接口-----单元测试-----再实现表现层接口-------UI界面


6、测试阶段-------测试阶段是编码阶段进行到一定的时间之后的发生的，是由专门的测试人员来负责的。不是程序员自测。
测试主要分为：功能测试以及性能测试。

7、交互阶段--------测试最终结果就是一个交互产品。



从1--7这个过程，被称之为：瀑布模型开发，瀑布是不可逆的，通常适用于需求不会发生改变的项目中。或者适用于需求发生在极早期的时候。如果需求发生在后期变化，则会严重打乱项目的整个开发过程。为了解决这个问题，我们需要使用：迭代增量式开发



迭代增量式开发：所谓迭代就是按照一定的周期性，不断的产生新的版本。所谓增量式就是指每个迭代版本中，除了解决上一个版本中的BUG问题之外，新增的内容都是不一样的。


所以我们在实际开发过程中使用的开发模式一般都是：迭代增量开发+瀑布模型    这个时候就允许需求变更了，只是需求的变更需要在下一个迭代版本中实现。当前版本如果需求发生变化，不负责修改。




如果支持当前版本需求发生变化的开发模式，通常是XP敏捷开发。它更多的是不存在前期设计，而是更看重后期重构。通常是程序员长期驻扎在客户现场，客户提出需求变更，只要需求的变更内容与需要替换的内容，开发时间上一致的话，就允许变更。


通常来说：迭代增量开发+瀑布模型   团队人数：6-20      每个版本的迭代周期：2--4周      XP迭代周期是：1--2周

















